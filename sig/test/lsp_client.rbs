# Generated from test/lsp_client.rb with RBS::Inline

class LSPClient
  type message = Hash[Symbol, untyped]

  @incoming_thread: Thread

  @next_request_id: Integer

  attr_reader reader: LanguageServer::Protocol::Transport::Io::Reader

  attr_reader writer: LanguageServer::Protocol::Transport::Io::Writer

  attr_reader current_dir: Pathname

  attr_reader notifications: Array[message]

  attr_accessor default_timeout: Integer

  attr_reader request_response_table: Hash[Integer, message]

  attr_reader diagnostics: Hash[Pathname, Array[Hash[Symbol, untyped]]]

  attr_reader open_files: Hash[String, String]

  # @rbs reader: LanguageServer::Protocol::Transport::Io::Reader
  # @rbs writer: LanguageServer::Protocol::Transport::Io::Writer
  # @rbs current_dir: Pathname
  # @rbs return: void
  def initialize: (reader: LanguageServer::Protocol::Transport::Io::Reader, writer: LanguageServer::Protocol::Transport::Io::Writer, current_dir: Pathname) -> void

  # @rbs id: Integer
  # @rbs timeout: untyped
  # @rbs return: Hash[Symbol, untyped]?
  def get_response: (Integer id, ?timeout: untyped) -> Hash[Symbol, untyped]?

  def flush_notifications: () -> void

  def join: () -> void

  # @rbs (?timeout: Integer) { () -> void } -> void
  def finally: (?timeout: Integer) { () -> void } -> void

  # @rbs [T] (?id: Integer, method: String, params: message?) { (untyped) -> T } -> T
  #    | (?id: Integer, method: String, params: message?) -> Integer
  def send_request: [T] (method: String, params: message?, ?id: Integer) { (untyped) -> T } -> T
                  | (method: String, params: message?, ?id: Integer) -> Integer

  # @rbs (method: String, params: untyped) -> void
  def send_notification: (method: String, params: untyped) -> void

  # @rbs (String) -> String
  def uri: (String) -> String

  # @rbs *paths: String
  def open_file: (*String paths) -> void

  # @rbs *paths: String
  def close_file: (*String paths) -> untyped

  # @rbs (String) { (String?) -> String } -> void
  def change_file: (String) { (String?) -> String } -> void

  # @rbs (String) -> void
  def save_file: (String) -> void

  # @rbs *path: String
  def change_watched_file: (*String paths) -> void

  # @rbs (?String query) { (untyped) -> void } -> void
  def workspace_symbol: (?String query) { (untyped) -> void } -> void

  # @rbs (String path, line: Integer, character: Integer) { (untyped) -> void } -> void
  def goto_definition: (String path, line: Integer, character: Integer) { (untyped) -> void } -> void

  # @rbs (String path, line: Integer, character: Integer) { (untyped) -> void } -> void
  def goto_implementation: (String path, line: Integer, character: Integer) { (untyped) -> void } -> void

  def fresh_request_id: () -> Integer
end
