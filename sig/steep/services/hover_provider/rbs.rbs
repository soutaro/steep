use RBS::Location, RBS::AST::Declarations, RBS::AST::Directives, RBS::TypeName, RBS::Environment

module Steep
  module Services
    module HoverProvider
      class RBS
        class TypeAliasContent
          attr_reader location: Location[untyped, untyped]

          attr_reader decl: Declarations::TypeAlias

          def initialize: (location: Location[untyped, untyped], decl: Declarations::TypeAlias) -> void
        end

        class ClassContent
          attr_reader location: Location

          type entry = Environment::ClassEntry | Environment::ModuleEntry
                     | Environment::ClassAliasEntry | Environment::ModuleAliasEntry

          attr_reader entry: entry

          def initialize: (location: Location, entry: entry) -> void
        end

        class InterfaceContent
          attr_reader location: Location[untyped, untyped]

          attr_reader decl: Declarations::Interface

          def initialize: (location: Location[untyped, untyped], decl: Declarations::Interface) -> void
        end

        type content = TypeAliasContent | ClassContent | InterfaceContent

        attr_reader service: TypeCheckService

        def initialize: (service: TypeCheckService) -> void

        def project: () -> Project

        def content_for: (target: Project::Target, path: Pathname, line: Integer, column: Integer) -> content?

        def content_for_type_name: (TypeName, env: Environment, location: Location[untyped, untyped]) -> content?
      end
    end
  end
end
