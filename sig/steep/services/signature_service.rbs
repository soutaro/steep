module Steep
  module Services
    # SignatureService takes care of two sets of RBS files.
    #
    # 1. RBS files loaded from `EnvironmentLoader` -- usually type signatures of libraries
    # 2. RBS files managed in editors -- usually type signatures of the development target (app or gem)
    #
    # The files in #2 are managed through `#status` and the changes are tracked.
    #
    class SignatureService
      type status = SyntaxErrorStatus | AncestorErrorStatus | LoadedStatus

      attr_reader status: status

      class SyntaxErrorStatus
        attr_reader files: Hash[Pathname, FileStatus]

        attr_reader changed_paths: Set[Pathname]

        attr_reader diagnostics: Array[Diagnostic::Signature::Base]

        attr_reader last_builder: RBS::DefinitionBuilder

        @rbs_index: Index::RBSIndex?

        @constant_resolver: RBS::Resolver::ConstantResolver?

        def initialize: (files: Hash[Pathname, FileStatus], changed_paths: Set[Pathname], diagnostics: Array[Diagnostic::Signature::Base], last_builder: RBS::DefinitionBuilder) -> void

        def rbs_index: () -> Index::RBSIndex

        def constant_resolver: () -> RBS::Resolver::ConstantResolver
      end

      class AncestorErrorStatus
        attr_reader files: Hash[Pathname, FileStatus]

        attr_reader changed_paths: Set[Pathname]

        attr_reader diagnostics: Array[Diagnostic::Signature::Base]

        attr_reader last_builder: RBS::DefinitionBuilder

        @rbs_index: Index::RBSIndex?

        @constant_resolver: RBS::Resolver::ConstantResolver?

        def initialize: (files: Hash[Pathname, FileStatus], changed_paths: Set[Pathname], diagnostics: Array[Diagnostic::Signature::Base], last_builder: RBS::DefinitionBuilder) -> void

        def rbs_index: () -> Index::RBSIndex

        def constant_resolver: () -> RBS::Resolver::ConstantResolver
      end

      class LoadedStatus
        attr_reader files: Hash[Pathname, FileStatus]

        attr_reader builder: RBS::DefinitionBuilder

        attr_reader implicitly_returns_nil: bool

        @rbs_index: Index::RBSIndex?

        @subtyping: Subtyping::Check?

        @constant_resolver: RBS::Resolver::ConstantResolver?

        def initialize: (files: Hash[Pathname, FileStatus], builder: RBS::DefinitionBuilder, implicitly_returns_nil: bool) -> void

        def subtyping: () -> Subtyping::Check

        def rbs_index: () -> Index::RBSIndex

        def constant_resolver: () -> RBS::Resolver::ConstantResolver
      end

      # A file has one of the three states:
      #
      # 1. The parsing succeeded and loaded a list of declarations
      # 2. The content has a syntax error and parsing failed
      # 3. Other unexpected error
      #
      class FileStatus
        attr_reader path: Pathname

        attr_reader content: String

        type signature = [RBS::Buffer, Array[RBS::AST::Directives::t], Array[RBS::AST::Declarations::t]]

        attr_reader signature: signature | Diagnostic::Signature::UnexpectedError | RBS::ParsingError

        def initialize: (
          path: Pathname,
          content: String,
          signature: signature | Diagnostic::Signature::UnexpectedError | RBS::ParsingError
        ) -> void
      end

      attr_reader implicitly_returns_nil: bool

      def initialize: (env: RBS::Environment, implicitly_returns_nil: bool) -> void

      def self.load_from: (RBS::EnvironmentLoader loader, implicitly_returns_nil: bool) -> SignatureService

      @env_rbs_paths: Set[Pathname]?

      # All RBS paths in environment, both dependency RBS and target RBS
      #
      def env_rbs_paths: () -> Set[Pathname]

      # Yield all RBS paths in the environment, both dependency RBS and target RBS
      #
      def each_rbs_path: () { (Pathname) -> void } -> void
                       | () -> Enumerator[Pathname, void]

      # The Target files
      #
      def files: () -> Hash[Pathname, FileStatus]

      def pending_changed_paths: () -> Set[Pathname]

      def latest_env: () -> RBS::Environment

      def latest_builder: () -> RBS::DefinitionBuilder

      def latest_rbs_index: () -> Index::RBSIndex

      def latest_constant_resolver: () -> RBS::Resolver::ConstantResolver

      def current_subtyping: () -> Subtyping::Check?

      def apply_changes: (Hash[Pathname, FileStatus] files, Server::ChangeBuffer::changes changes) -> Hash[Pathname, FileStatus]

      # The entry point to apply the edit to the signatures
      #
      def update: (Server::ChangeBuffer::changes changes) -> void

      def update_env: (
        Hash[Pathname, FileStatus] updated_files,
        paths: Set[Pathname]
      ) -> (RBS::DefinitionBuilder::AncestorBuilder | Array[Diagnostic::Signature::Base])

      def rescue_rbs_error: (Array[RBS::BaseError] errors) { () -> void } -> void

      def update_builder: (ancestor_builder: RBS::DefinitionBuilder::AncestorBuilder, paths: Set[Pathname]) -> RBS::DefinitionBuilder

      def type_names: (paths: Set[Pathname], env: RBS::Environment) -> Set[RBS::TypeName]

      def const_decls: (paths: Set[Pathname], env: RBS::Environment) -> Hash[RBS::TypeName, RBS::Environment::ConstantEntry]

      def global_decls: (paths: Set[Pathname], ?env: RBS::Environment) -> Hash[Symbol, RBS::Environment::GlobalEntry]

      def type_name_from_decl: (RBS::AST::Declarations::t decl, set: Set[RBS::TypeName]) -> void

      def add_descendants: (graph: RBS::AncestorGraph, names: Set[RBS::TypeName], set: Set[RBS::TypeName]) -> void

      def add_nested_decls: (env: RBS::Environment, names: Set[RBS::TypeName], set: Set[RBS::TypeName]) -> void
    end
  end
end
