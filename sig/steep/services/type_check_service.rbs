module Steep
  module Services
    class TypeCheckService
      attr_reader project: Project

      attr_reader signature_validation_diagnostics: Hash[Symbol, Hash[Pathname, Array[Diagnostic::Signature::Base]]]

      attr_reader source_files: Hash[Pathname, SourceFile]

      attr_reader signature_services: Hash[Symbol, SignatureService]

      class SourceFile
        attr_reader path: Pathname

        attr_reader target: Project::Target

        attr_reader content: String

        attr_reader node: Parser::AST::Node | nil | false

        attr_reader typing: Typing?

        attr_reader ignores: Source::IgnoreRanges?

        attr_reader errors: Array[Diagnostic::Ruby::Base]?

        def initialize: (
          path: Pathname,
          node: Parser::AST::Node | nil | false,
          content: String,
          typing: Typing?,
          ignores: Source::IgnoreRanges?,
          errors: Array[Diagnostic::Ruby::Base]?
        ) -> void

        def self.with_syntax_error: (path: Pathname, content: String, error: Diagnostic::Ruby::SyntaxError) -> SourceFile

        def self.with_typing: (path: Pathname, content: String, typing: Typing, ignores: Source::IgnoreRanges, node: Parser::AST::Node?) -> SourceFile

        def self.no_data: (path: Pathname, content: String) -> SourceFile

        def update_content: (String content) -> SourceFile

        # Diagnostics filgered by `ignores`
        #
        def diagnostics: () -> Array[Diagnostic::Ruby::Base]
      end

      def initialize: (project: Project) -> void

      def signature_diagnostics: () -> Hash[Pathname, Array[Diagnostic::Signature::Base]]

      def has_diagnostics?: () -> bool

      def diagnostics: () -> Hash[Pathname, Array[Diagnostic::Ruby::Base | Diagnostic::Signature::Base]]

      # Yields diagnostics reported on each path
      #
      # * Signature diagnostics contains everything reported to each target
      #
      def each_diagnostics: () { ([Pathname, Array[Diagnostic::Ruby::Base] | Array[Diagnostic::Signature::Base]]) -> void } -> void
                          | () -> Enumerator[[Pathname, Array[Diagnostic::Ruby::Base] | Array[Diagnostic::Signature::Base]], void]

      # Record the changes to the files managed by the service
      #
      # Note that the diagnostics are not updated by this method.
      #
      def update: (changes: Server::ChangeBuffer::changes) -> void

      # Validates RBS signature included in the path
      #
      # Updates `#signature_validation_diagnostics` of the file and returns the diagnostics of the target-path pair.
      #
      def validate_signature: (path: Pathname, target: Project::Target) -> Array[Diagnostic::Signature::Base]

      # Type check the code of given path and updates the `#source_files`
      #
      # * Returns `nil` if the type check doesn't complete.
      # * Returns an array if the type check complete and detects no/some errors.
      #
      def typecheck_source: (path: Pathname, target: Project::Target?) -> Array[Diagnostic::Ruby::Base]?

      def update_signature: (changes: Server::ChangeBuffer::changes) -> void

      def update_sources: (changes: Server::ChangeBuffer::changes) -> void

      def type_check_file: (target: Project::Target, subtyping: Subtyping::Check, path: Pathname, text: String) { () -> RBS::Resolver::ConstantResolver } -> SourceFile

      def self.type_check: (source: Source, subtyping: Subtyping::Check, constant_resolver: RBS::Resolver::ConstantResolver, cursor: Integer?) -> Typing

      def source_file?: (Pathname path) -> bool

      def signature_file?: (Pathname path) -> Array[Symbol]?

      def app_signature_file?: (Pathname path) -> Array[Symbol]?

      def lib_signature_file?: (Pathname path) -> bool
    end
  end
end
