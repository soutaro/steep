use RBS::TypeName, RBS::Location

module Steep
  module Services
    class GotoService
      include ModuleHelper

      # Where the query is issued from
      #
      # * `:ruby` if the query is issued from a Ruby code
      # * `:rbs` if the query is issued from a RBS file
      #
      type from = :ruby | :rbs

      module SourceHelper : _From
        interface _From
          def from: () -> from
        end

        def from_ruby?: () -> bool

        def from_rbs?: () -> bool
      end

      # Query a constant
      #
      class ConstantQuery
        include SourceHelper

        attr_reader name: TypeName

        # Where the query is issued from
        attr_reader from: from

        def initialize: (name: TypeName, from: from) -> void
      end

      # Query a method
      #
      class MethodQuery
        include SourceHelper

        attr_reader name: method_name

        # Where the query is issued from
        attr_reader from: from

        def initialize: (name: method_name, from: from) -> void
      end

      # Query a type name
      #
      #
      #
      class TypeNameQuery
        attr_reader name: TypeName

        def initialize: (name: TypeName) -> void
      end

      type query = ConstantQuery | MethodQuery | TypeNameQuery

      type loc = Location[bot, bot] | Parser::Source::Range

      type target_loc = [Project::Target, loc]

      attr_reader type_check: TypeCheckService

      attr_reader assignment: PathAssignment

      def initialize: (type_check: TypeCheckService, assignment: PathAssignment) -> void

      def project: () -> Project

      # Returns array of locations that is a response to a *Go to implementation* request
      #
      def implementation: (path: Pathname, line: Integer, column: Integer) -> Array[loc]

      # Returns array of locations that is a response to a *Go to definition* request
      #
      def definition: (path: Pathname, line: Integer, column: Integer) -> Array[loc]

      # Returns array of locations that is a response to a *Go to type-definition* request
      #
      def type_definition: (path: Pathname, line: Integer, column: Integer) -> Array[loc]

      private

      # Returns a set of queries
      def query_at: (path: Pathname, line: Integer, column: Integer) -> Array[query]

      def query_at_ruby_code: (Array[query], Project::Target, path: Pathname, line: Integer, column: Integer) -> void

      def query_at_inline_code: (Array[query], Project::Target, path: Pathname, line: Integer, column: Integer) -> void

      def query_at_rbs: (Array[query], Project::Target, path: Pathname, line: Integer, column: Integer) -> void

      def each_type_name: (AST::Types::t) { (TypeName) -> void } -> void
                        | (AST::Types::t) -> Enumerator[TypeName, void]

      def test_ast_location: (Parser::Source::Range loc, line: Integer, column: Integer) -> bool

      def type_check_path: (target: Project::Target, path: Pathname, content: String, line: Integer, column: Integer) -> [Typing, SignatureService]?

      def constant_definition_in_rbs: (TypeName name, locations: Array[target_loc]) -> Array[target_loc]

      def constant_definition_in_ruby: (TypeName name, locations: Array[target_loc]) -> Array[target_loc]

      def method_locations: (method_name, in_ruby: bool, in_rbs: bool, locations: Array[target_loc]) -> Array[target_loc]

      def type_name_locations: (TypeName name, ?locations: Array[target_loc]) -> Array[target_loc]
    end
  end
end
