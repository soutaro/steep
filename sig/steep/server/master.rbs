use LanguageServer::Protocol::Interface::Diagnostic as LSPDiagnostic

module Steep
  module Server
    class Master
      module LSP = LanguageServer::Protocol

      type lsp_notification = { method: String, params: untyped }

      type lsp_request = { id: String, method: String, params: untyped }

      type lsp_response = { id: String, result: untyped }

      type lsp_message = { method: String, id: String?, params: untyped?, result: untyped? }

      class ResultHandler
        attr_reader request: lsp_request

        attr_reader completion_handler: (^(lsp_response) -> void)?

        attr_reader response: lsp_response?

        @completed: bool

        def initialize: (request: untyped) -> void

        def process_response: (lsp_response message) -> bool

        def result: () -> untyped

        def completed?: () -> bool

        def on_completion: () ?{ (lsp_response) -> void } -> void
      end

      class GroupHandler
        attr_reader request: lsp_request

        attr_reader handlers: Hash[String, ResultHandler]

        attr_reader completion_handler: (^(Array[ResultHandler]) -> void)?

        def initialize: () -> void

        def process_response: (lsp_response message) -> bool

        def completed?: () -> bool

        def <<: (ResultHandler handler) -> void

        def on_completion: () { (Array[ResultHandler]) -> void } -> void
      end

      class ResultController
        attr_reader handlers: Array[ResultHandler | GroupHandler]

        def initialize: () -> void

        def <<: (ResultHandler | GroupHandler handler) -> void

        def request_group: () { (GroupHandler) -> void } -> GroupHandler

        def process_response: (lsp_response message) -> bool
      end

      module MessageUtils : _WithMessage
        interface _WithMessage
          def message: () -> untyped
        end

        def request?: () -> bool

        def notification?: () -> bool

        def response?: () -> bool

        %a{pure} def method: () -> String?

        %a{pure} def id: () -> String?

        %a{pure} def result: () -> untyped?

        %a{pure} def params: () -> untyped?
      end

      class ReceiveMessageJob
        attr_reader source: WorkerProcess | :client

        attr_reader message: untyped

        def initialize: (source: WorkerProcess | :client, message: untyped) -> void

        include MessageUtils
      end

      class SendMessageJob
        attr_reader dest: WorkerProcess | :client

        attr_reader message: untyped

        def self.new: (dest: WorkerProcess | :client, message: untyped) -> instance

        def self.to_worker: (WorkerProcess, message: untyped) -> SendMessageJob

        def self.to_client: (message: untyped) -> SendMessageJob

        include MessageUtils
      end

      attr_reader project: Project

      attr_reader reader: LanguageServer::Protocol::Transport::Io::Reader

      attr_reader writer: LanguageServer::Protocol::Transport::Io::Writer

      attr_reader commandline_args: Array[String]

      attr_reader interaction_worker: WorkerProcess?

      attr_reader typecheck_workers: Array[WorkerProcess]

      # Queue for processing incoming jobs and postpone a work
      #
      # ```rb
      # # Notify the *work/main* thread a message is arriving from a worker or client
      # job_queue << ReceiveMessageJob.new(source: interaction_worker, message: message)
      # ```
      #
      # ```rb
      # job_queue.push(
      #   -> do
      #     puts "Doing something on the *work/main* thread"
      #   end
      # )
      # ```
      attr_reader job_queue: Thread::Queue

      # Queue for writing messages to the client and the workers
      #
      attr_reader write_queue: Thread::SizedQueue

      attr_reader current_type_check_request: TypeCheckController::Request?

      attr_reader current_diagnostics: Hash[Pathname, Array[LSPDiagnostic::json]]

      attr_reader controller: TypeCheckController

      attr_reader result_controller: ResultController

      attr_reader initialize_params: Hash[Symbol, untyped]?

      # `true` to start type checking if it needs
      #
      # * On the startup, and
      # * When files are changed
      #
      attr_accessor typecheck_automatically: bool

      attr_reader start_type_checking_queue: DelayQueue

      def initialize: (project: Project, reader: untyped, writer: untyped, interaction_worker: WorkerProcess?, typecheck_workers: Array[WorkerProcess], ?queue: Thread::Queue) -> void

      # Start the Steep language server
      #
      # Returns after the language server shutdown.
      # The shutdown process starts by `exit` message.
      #
      # Raises an exception if the worker processes doesn't shutdown properly, like being `#kill`-ed.
      # Exiting the process is assumed in the case of error.
      # The only one cleanup it does is stopping the worker processes, by `SIGKILL`.
      #
      def start: () -> void

      # Stops the language server workers by sending SIGTERM
      #
      # This skips the normal shutdown process defined in LSP.
      # The `#start` call will result in an exception.
      #
      def kill: () -> void

      def each_worker: () { (WorkerProcess) -> void } -> void
                     | () -> Enumerator[WorkerProcess, void]

      def pathname: (String uri) -> Pathname?

      def assign_initialize_params: (untyped) -> void

      # Returns `true` if `DidChangeWatchedFiles` is supported by the client based on the `initialize` params
      #
      def file_system_watcher_supported?: () -> bool

      # Returns `true` if work done progress is supported by the client based on the `initialize` params
      #
      def work_done_progress_supported?: () -> bool

      def process_message_from_client: (untyped message) -> void

      def process_message_from_worker: (untyped message, worker: WorkerProcess) -> void

      def start_type_check: (last_request: TypeCheckController::Request?, progress: WorkDoneProgress, ?include_unchanged: bool, ?report_progress_threshold: Integer, needs_response: bool) -> void
                          | (request: TypeCheckController::Request, last_request: TypeCheckController::Request?, ?report_progress_threshold: Integer) -> void

      def finish_type_check: (TypeCheckController::Request) -> void

      def on_type_check_update: (guid: String, path: Pathname, target: Project::Target, diagnostics: Array[LSPDiagnostic::json]?) -> void

      def broadcast_notification: (lsp_notification message) -> void

      def send_notification: (lsp_notification message, worker: WorkerProcess) -> void

      def fresh_request_id: () -> String

      def send_request: (method: String, worker: WorkerProcess, ?id: String, ?params: untyped?) ?{ (ResultHandler) -> void } -> ResultHandler

      def group_request: () { (GroupHandler) -> void } -> GroupHandler

      def enqueue_write_job: (SendMessageJob job) -> void

      def work_done_progress: (String) -> WorkDoneProgress

      # Queue a new `publishDiagnostics` notification to the client
      #
      # * If `diagnostics` is `nil`, it skips sending notification
      # * If path is already pushed, the diagnostics will be merged
      #
      def push_diagnostics: (Pathname path, Array[LSPDiagnostic::json]? diagnostics) -> void
    end
  end
end
