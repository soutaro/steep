module Steep
  VERSION: String

  # `ui_logger` is a logger for user interaction messages
  #
  # The *main* process has the logger.
  # The *worker* processes disables the logging through this.
  #
  def self.ui_logger: () -> (Logger & ActiveSupport::TaggedLogging)

  def self.logger: () -> (Logger & ActiveSupport::TaggedLogging)

  def self.new_logger: (IO output, Integer? prev_level) -> (Logger & ActiveSupport::TaggedLogging)

  attr_accessor self.log_output: IO

  def self.measure: [A] (String message, ?level: ::Symbol, ?threshold: Float) { () -> A } -> A

  def self.log_error: (Exception exn, ?message: ::String) -> void

  def self.can_fork?: () -> boolish

  self.@logger: (Logger & ActiveSupport::TaggedLogging)?

  self.@ui_logger: (Logger & ActiveSupport::TaggedLogging)?

  class Sampler
    type sample = [String, Float]
    @samples: Array[sample]

    def initialize: () -> void

    def sample: [A] (String message) { () -> A } -> A

    def count: () -> Integer

    def total: () -> Float

    def slowests: (Integer num) -> Array[sample]

    def average: () -> Float

    def percentile: (Integer p) -> Float
  end

  def self.measure2: [A] (String message, ?level: ::Symbol) { (Sampler) -> A } -> A
end
