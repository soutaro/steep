module Parser
  module Source
    #
    # A range of characters in a particular source buffer.
    #
    # The range is always exclusive, i.e. a range with `begin_pos` of 3 and
    # `end_pos` of 5 will contain the following characters:
    #
    #     example
    #        ^^
    #
    # @!attribute [r] source_buffer
    #  @return [Parser::Source::Buffer]
    #
    # @!attribute [r] begin_pos
    #  @return [Integer] index of the first character in the range
    #
    # @!attribute [r] end_pos
    #  @return [Integer] index of the character after the last character in the range
    #
    # @api public
    #
    class Range
      include Comparable

      attr_reader source_buffer: untyped

      attr_reader begin_pos: Integer

      attr_reader end_pos: Integer

      #
      # @param [Buffer]  source_buffer
      # @param [Integer] begin_pos
      # @param [Integer] end_pos
      #
      def initialize: (untyped source_buffer, untyped begin_pos, untyped end_pos) -> void

      #
      # @return [Range] a zero-length range located just before the beginning
      #   of this range.
      #
      def begin: () -> Range

      #
      # @return [Range] a zero-length range located just after the end
      #   of this range.
      #
      def end: () -> Range

      #
      # @return [Integer] amount of characters included in this range.
      #
      def size: () -> Integer

      alias length size

      #
      # Line number of the beginning of this range. By default, the first line
      # of a buffer is 1; as such, line numbers are most commonly one-based.
      #
      # @see Buffer
      # @return [Integer] line number of the beginning of this range.
      #
      def line: () -> Integer

      alias first_line line

      #
      # @return [Integer] zero-based column number of the beginning of this range.
      #
      def column: () -> Integer

      #
      # @return [Integer] line number of the end of this range.
      #
      def last_line: () -> Integer

      #
      # @return [Integer] zero-based column number of the end of this range.
      #
      def last_column: () -> Integer

      #
      # @return [::Range] a range of columns spanned by this range.
      # @raise RangeError
      #
      def column_range: () -> ::Range[Integer]

      #
      # @return [String] a line of source code containing the beginning of this range.
      #
      def source_line: () -> String

      #
      # @return [String] all source code covered by this range.
      #
      def source: () -> String

      #
      # `is?` provides a concise way to compare the source corresponding to this range.
      # For example, `r.source == '(' || r.source == 'begin'` is equivalent to
      # `r.is?('(', 'begin')`.
      #
      def is?: (*untyped what) -> untyped

      #
      # @return [Array<Integer>] a set of character indexes contained in this range.
      #
      def to_a: () -> Array[Integer]

      #
      # @return [Range] a Ruby range with the same `begin_pos` and `end_pos`
      #
      def to_range: () -> ::Range[Integer]

      #
      # Composes a GNU/Clang-style string representation of the beginning of this
      # range.
      #
      # For example, for the following range in file `foo.rb`,
      #
      #     def foo
      #         ^^^
      #
      # `to_s` will return `foo.rb:1:5`.
      # Note that the column index is one-based.
      #
      # @return [String]
      #
      def to_s: () -> String

      #
      # @param [Hash] Endpoint(s) to change, any combination of :begin_pos or :end_pos
      # @return [Range] the same range as this range but with the given end point(s) changed
      # to the given value(s).
      #
      def with: (?begin_pos: untyped, ?end_pos: untyped) -> untyped

      #
      # @param [Hash] Endpoint(s) to change, any combination of :begin_pos or :end_pos
      # @return [Range] the same range as this range but with the given end point(s) adjusted
      # by the given amount(s)
      #
      def adjust: (?begin_pos: ::Integer, ?end_pos: ::Integer) -> untyped

      #
      # @param [Integer] new_size
      # @return [Range] a range beginning at the same point as this range and length `new_size`.
      #
      def resize: (untyped new_size) -> untyped

      #
      # @param [Range] other
      # @return [Range] smallest possible range spanning both this range and `other`.
      #
      def join: (untyped other) -> untyped

      #
      # @param [Range] other
      # @return [Range] overlapping region of this range and `other`, or `nil`
      #   if they do not overlap
      #
      def intersect: (untyped other) -> (untyped | nil)

      #
      # Return `true` iff this range and `other` are disjoint.
      #
      # Two ranges must be one and only one of ==, disjoint?, contains?, contained? or crossing?
      #
      # @param [Range] other
      # @return [Boolean]
      #
      def disjoint?: (untyped other) -> untyped

      #
      # Return `true` iff this range is not disjoint from `other`.
      #
      # @param [Range] other
      # @return [Boolean] `true` if this range and `other` overlap
      #
      def overlaps?: (untyped other) -> untyped

      #
      # Returns true iff this range contains (strictly) `other`.
      #
      # Two ranges must be one and only one of ==, disjoint?, contains?, contained? or crossing?
      #
      # @param [Range] other
      # @return [Boolean]
      #
      def contains?: (untyped other) -> untyped

      #
      # Return `other.contains?(self)`
      #
      # Two ranges must be one and only one of ==, disjoint?, contains?, contained? or crossing?
      #
      # @param [Range] other
      # @return [Boolean]
      #
      def contained?: (untyped other) -> untyped

      #
      # Returns true iff both ranges intersect and also have different elements from one another.
      #
      # Two ranges must be one and only one of ==, disjoint?, contains?, contained? or crossing?
      #
      # @param [Range] other
      # @return [Boolean]
      #
      def crossing?: (untyped other) -> (false | untyped)

      #
      # Checks if a range is empty; if it contains no characters
      # @return [Boolean]
      def empty?: () -> untyped

      #
      # Compare ranges, first by begin_pos, then by end_pos.
      #
      def <=>: (untyped other) -> (nil | untyped)

      alias eql? ==

      #
      # Support for Ranges be used in as Hash indices and in Sets.
      #
      def hash: () -> untyped

      #
      # @return [String] a human-readable representation of this range.
      #
      def inspect: () -> ::String
    end
  end
end
